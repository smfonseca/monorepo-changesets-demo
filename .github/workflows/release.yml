name: üöÄ Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.CHANGESET_GH }}
  GITHUB_FREEZE: ${{ secrets.CODE_FREEZE }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  release:
    name: üöÄ Release
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [lts/*]
        pnpm-version: [latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: ‚¨áÔ∏è Checkout
        id: checkout
        uses: actions/checkout@v2.3.3
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üü¢ Setup node
        id: setup-node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: ü•° Setup pnpm
        id: setup-pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false

      - name: üéà Get pnpm store directory
        id: get-pnpm-cache-dir
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: üß© Install Dependencies
        id: install-dependencies
        run: pnpm install

      - name: üèóÔ∏è Preview Release
        id: changeset-status
        run: |
          # Generate the status JSON
          pnpm changeset status --output changeset-status.json

          # Check if the JSON file exists
          if [ ! -f changeset-status.json ]; then
            echo "changeset-status.json file not found. Exiting."
            echo "should_skip=true" >> $GITHUB_ENV
            exit 0
          fi

          # Parse the JSON to check for releases
          releases=$(jq '.releases | length' changeset-status.json)

          if [ "$releases" -eq 0 ]; then
            echo "No packages to release. Skipping further steps."
            echo "should_skip=true" >> $GITHUB_ENV
          else
            echo "Packages to release found. Proceeding."
            echo "should_skip=false" >> $GITHUB_ENV
          fi
        env:
          PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin

      - name: üèóÔ∏è Bump Version and Apply Changesets
        if: env.should_skip != 'true'
        run: |
          pnpm changeset version

          # Extract updated package names
          updated_packages=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"name\":' {} | sed -E 's/.*\"name\": \"@smfonseca\/([^\"]+)\",/\\1/'")

          # Extract updated versions (remove "version" text and quotes)
          updated_versions=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"version\":' {} | sed -E 's/.*\"version\": \"([^\"]+)\".*/\\1/'")

          # Combine package names and versions into a single string with a space after the colon
          packages_with_versions=$(paste -d':' <(echo "$updated_packages") <(echo "$updated_versions") | sed 's/:/: /g' | tr '\n' ', ' | sed 's/,/, /g')

          # Generate the commit message
          if [ -n "$packages_with_versions" ]; then
            commit_message="chore(release): $packages_with_versions [skip ci]"
          else
            commit_message="chore(release): apply changesets [skip ci]"
          fi

          # Configure git and create a commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "$commit_message" || echo "No changes to commit"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Push Updated Files to Main
        run: git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Publish to NPM
        if: env.should_skip != 'true'
        run: |
          pnpm config set '//registry.npmjs.org/:_authToken' "${NODE_AUTH_TOKEN}"
          pnpm changeset publish -r
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push Tags to GitHub
        if: env.should_skip != 'true'
        run: |
          git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitHub CLI
        if: env.should_skip != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Generate Clean Release Notes
        if: env.should_skip != 'true'
        id: release-notes
        run: |
          # Find all files changed in the last commit
          echo "Files changed in this commit:"
          git diff --name-only HEAD~1 HEAD

          # Identify updated CHANGELOG.md files or changeset files
          updated_changelogs=$(git diff --name-only HEAD~1 HEAD | grep "CHANGELOG.md")
          updated_changesets=$(git diff --name-only HEAD~1 HEAD | grep ".changeset/")
          if [ -z "$updated_changelogs" ]; then
            echo "No updated changelogs found."

            # Check if only empty changesets are present
            empty_changesets=true
            for changeset in $updated_changesets; do
              content=$(cat "$changeset")
              if [ "$(echo "$content" | grep -v '^---$')" ]; then
                empty_changesets=false
                break
              fi
            done

            if [ "$empty_changesets" = true ]; then
              echo "Only empty changesets detected. Skipping this step."
              echo "release_notes=No updates in this release." >> $GITHUB_ENV
              exit 0
            fi
          fi

          echo "Updated Changelogs:"
          echo "$updated_changelogs"

          # Initialize release notes
          release_notes=""

          # Extract the latest changes from each updated changelog
          for changelog in $updated_changelogs; do
            echo "Processing $changelog"

            # Check if the file exists
            if [ ! -f "$changelog" ]; then
              echo "File not found: $changelog. Skipping."
              continue
            fi

            # Debug: Output the content of the changelog
            echo "Content of $changelog:"
            cat "$changelog"

            # Extract version heading and its content (from first ## to second ##)
            latest_entry=$(awk '/^## / {if (flag) exit; flag=1; print; next} flag {print}' "$changelog")
            if [ -z "$latest_entry" ]; then
              echo "No valid changelog entry found in $changelog. Skipping."
              continue
            fi

            echo "Latest Entry: $latest_entry"

            # Extract change details (everything after the version heading)
            change_details=$(echo "$latest_entry" | tail -n +2)
            echo "Change Details: $change_details"

            # Combine the version and change details
            release_notes+="$change_details\n\n"
          done

          # Debug final release notes
          echo "Final Release Notes:"
          echo "$release_notes"

          # Remove trailing newlines or spaces
          release_notes=$(echo "$release_notes" | sed 's/[[:space:]]*$//')

          # Check if release notes are meaningful
          if [ -z "$release_notes" ]; then
            echo "No meaningful changes detected. Skipping release."
            echo "release_notes=No meaningful changes detected. Skipping release." >> $GITHUB_ENV
            exit 0
          fi

          # Export the release notes for use in the next steps
          echo "release_notes<<EOF" >> $GITHUB_ENV
          echo -e "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Releases
        if: env.should_skip != 'true'
        run: |
          for tag in $(git tag --points-at HEAD); do
            gh release create "$tag" \
              --title "$tag" \
              --notes "$release_notes"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


