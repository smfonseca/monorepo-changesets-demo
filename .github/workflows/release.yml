name: 🚀 Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.CHANGESET_GH }}
  GITHUB_FREEZE: ${{ secrets.CODE_FREEZE }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  release:
    name: 🚀 Release
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [lts/*]
        pnpm-version: [latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: ⬇️ Checkout
        id: checkout
        uses: actions/checkout@v2.3.3
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🟢 Setup node
        id: setup-node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🥡 Setup pnpm
        id: setup-pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false

      - name: 🎈 Get pnpm store directory
        id: get-pnpm-cache-dir
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: 🔆 Cache pnpm modules
        uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: ${{ steps.get-pnpm-cache-dir.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🧩 Install Dependencies
        id: install-dependencies
        run: pnpm install

      - name: 🏗️ Preview Release
        run: pnpm changeset status --verbose

      - name: 🏗️ Bump Version and Apply Changesets
        run: |
          pnpm changeset version

          # Extract updated package names
          updated_packages=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"name\":' {} | sed -E 's/.*\"name\": \"@monorepo-changesets-demo\/([^\"]+)\",/\\1/'")

          # Extract updated versions (remove "version" text and quotes)
          updated_versions=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"version\":' {} | sed -E 's/.*\"version\": \"([^\"]+)\".*/\\1/'")

          # Combine package names and versions into a single string with a space after the colon
          packages_with_versions=$(paste -d':' <(echo "$updated_packages") <(echo "$updated_versions") | sed 's/:/: /g' | tr '\n' ', ' | sed 's/,/, /g')

          # Generate the commit message
          if [ -n "$packages_with_versions" ]; then
            commit_message="chore(release): $packages_with_versions [skip ci]"
          else
            commit_message="chore(release): apply changesets [skip ci]"
          fi

          # Configure git and create a commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "$commit_message" || echo "No changes to commit"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Push Updated Files to Main
        run: git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Publish to NPM
        run: |
          pnpm changeset publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push Tags to GitHub
        run: |
          git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Install GitHub CLI
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install gh -y

      - name: Extract Changeset Changelog
        id: changelog
        run: |
          # Ensure there are tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "no-tag")
          if [ "$latest_tag" = "no-tag" ]; then
            echo "No tags found. Skipping changelog extraction."
            exit 1
          fi

          # Extract package name from tag
          package_name=$(echo "$latest_tag" | sed -E 's/@[^@]+@([a-zA-Z0-9_-]+)/\1/')
          if [ -z "$package_name" ]; then
            echo "Failed to extract package name from tag: $latest_tag"
            exit 1
          fi

          # Locate the changelog file
          changelog_file=$(find ./packages -path "*/$package_name/CHANGELOG.md")
          if [ -z "$changelog_file" ]; then
            echo "Changelog file not found for package: $package_name"
            exit 1
          fi

          # Extract changelog for the latest tag
          changelog=$(awk "/^## \\[$latest_tag\\]/ {flag=1; next} /^## \\[/ {flag=0} flag {print}" "$changelog_file")
          if [ -z "$changelog" ]; then
            echo "No changelog entry found for tag $latest_tag in file $changelog_file"
            exit 1
          fi

          # Export to GITHUB_ENV
          {
            echo "changelog<<EOF"
            echo "$changelog"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Create GitHub Releases
        run: |
          for tag in $(git tag --points-at HEAD); do
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "tag_name": "'"$tag"'",
                "target_commitish": "main",
                "name": "Release '"$tag"'",
                "body": "'"$changelog"'",
                "draft": false,
                "prerelease": false
              }' \
              https://api.github.com/repos/${GITHUB_REPOSITORY}/releases
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
