name: 🚀 Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.CHANGESET_GH }}
  GITHUB_FREEZE: ${{ secrets.CODE_FREEZE }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  release:
    name: 🚀 Release
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [lts/*]
        pnpm-version: [latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: ⬇️ Checkout
        id: checkout
        uses: actions/checkout@v2.3.3
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🟢 Setup node
        id: setup-node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🥡 Setup pnpm
        id: setup-pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false

      - name: 🎈 Get pnpm store directory
        id: get-pnpm-cache-dir
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: 🔆 Cache pnpm modules
        uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: ${{ steps.get-pnpm-cache-dir.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🧩 Install Dependencies
        id: install-dependencies
        run: pnpm install

      - name: 🏗️ Preview Release
        run: pnpm changeset status --verbose

      - name: 🏗️ Bump Version and Apply Changesets
        run: |
          pnpm changeset version

          # Extract updated package names
          updated_packages=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"name\":' {} | sed -E 's/.*\"name\": \"@smfonseca\/([^\"]+)\",/\\1/'")

          # Extract updated versions (remove "version" text and quotes)
          updated_versions=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"version\":' {} | sed -E 's/.*\"version\": \"([^\"]+)\".*/\\1/'")

          # Combine package names and versions into a single string with a space after the colon
          packages_with_versions=$(paste -d':' <(echo "$updated_packages") <(echo "$updated_versions") | sed 's/:/: /g' | tr '\n' ', ' | sed 's/,/, /g')

          # Generate the commit message
          if [ -n "$packages_with_versions" ]; then
            commit_message="chore(release): $packages_with_versions [skip ci]"
          else
            commit_message="chore(release): apply changesets [skip ci]"
          fi

          # Configure git and create a commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "$commit_message" || echo "No changes to commit"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Push Updated Files to Main
        run: git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Publish to NPM
        run: |
          pnpm changeset publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push Tags to GitHub
        run: |
          git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Generate Release Notes
        id: release-notes
        run: |
          # Find all updated CHANGELOG.md files in the last commit
          updated_changelogs=$(git diff --name-only HEAD~1 HEAD | grep "CHANGELOG.md")
          if [ -z "$updated_changelogs" ]; then
            echo "No updated changelogs found."
            echo "release_notes=No updates in this release." >> $GITHUB_ENV
            exit 0
          fi

          # Initialize release notes
          release_notes=""

          # Extract the latest changes from each updated changelog
          for changelog in $updated_changelogs; do
            package_name=$(basename $(dirname "$changelog"))

            # Extract the version heading and its content (from first ## to second ##)
            latest_entry=$(awk '/^## / {if (flag) exit; flag=1; print; next} flag {print}' "$changelog")

            # Append the package name, version, and changelog entry to the release notes
            release_notes+="### $package_name\n\n$latest_entry\n\n"
          done

          # Trim any trailing newlines from the final release notes
          release_notes=$(echo "$release_notes" | sed 's/[[:space:]]*$//')

          # Export the release notes for use in the next steps
          echo "release_notes<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Releases
        run: |
          for tag in $(git tag --points-at HEAD); do
            gh release create "$tag" \
              --title "$tag" \
              --notes "$release_notes"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

