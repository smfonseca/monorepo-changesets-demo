name: üöÄ Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.CHANGESET_GH }}
  GITHUB_FREEZE: ${{ secrets.CODE_FREEZE }}
  # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  release:
    name: üöÄ Release
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [lts/*]
        pnpm-version: [latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: ‚¨áÔ∏è Checkout
        id: checkout
        uses: actions/checkout@v2.3.3
        with:
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üü¢ Setup node
        id: setup-node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: ü•° Setup pnpm
        id: setup-pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false

      - name: üéà Get pnpm store directory
        id: get-pnpm-cache-dir
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: üîÜ Cache pnpm modules
        uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: ${{ steps.get-pnpm-cache-dir.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üß© Install Dependencies
        id: install-dependencies
        run: pnpm install

      # - name: üèóÔ∏è Check for Changesets
      #   run: |
      #     pnpm changeset status || echo "No changeset found. If necessary, adding an empty changeset..."
      #     pnpm changeset add --empty --message "Non-release changes [skip ci]" || true

      - name: üèóÔ∏è Preview Release
        run: pnpm changeset status --verbose

      - name: üèóÔ∏è Check Code Freeze
        id: check-freeze
        run: |
          if [ "${{ env.GITHUB_FREEZE }}" = "true" ]; then
            echo "Code freeze is active"
            echo "freeze=true" >> $GITHUB_ENV
          else
            echo "Code freeze is not active"
            echo "freeze=false" >> $GITHUB_ENV
          fi

      - name: üèóÔ∏è Bump Version and Apply Changesets
        if: env.freeze == 'false'
        run: |
          pnpm changeset version

          updated_packages=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"name\":' {} | sed -E 's/.*\"name\": \"@monorepo-changesets-demo\/([^\"]+)\",/\\1/' | tr -d '[:space:]'")
          updated_versions=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"version\":' {} | sed -E 's/.*\"version\": \"([^\"]+)\",/\\1/' | tr -d '[:space:]'")

          packages_with_versions=$(paste -d: <(echo "$updated_packages") <(echo "$updated_versions") | tr '\n' ', ' | sed 's/, $//')

          if [ -n "$packages_with_versions" ]; then
            commit_message="chore(release): apply changesets to $packages_with_versions [skip ci]"
          else
            commit_message="chore(release): apply changesets [skip ci]"
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "$commit_message" || echo "No changes to commit"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Push Updated Files to Main
        if: env.freeze == 'false'
        run: git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: üèóÔ∏è Bump Versions with Changesets
      #   run: pnpm changeset version

      # - name: üì£ Prepare Commit Message
      #   run: |
      #     # Check for changes in package.json files
      #     changed_files=$(git diff --staged --name-only | grep "package.json" || true)
      #     if [ -z "$changed_files" ]; then
      #       echo "No changes detected in package.json files."
      #       echo "commit_message=chore(release): version packages ü¶ã [skip ci]" >> $GITHUB_ENV
      #       exit 0
      #     fi

      #     # Extract updated package names and versions
      #     updated_packages=""
      #     updated_versions=""

      #     while IFS= read -r file; do
      #       package_name=$(grep '"name":' "$file" | sed -E 's/.*"name": "@monorepo-changesets-demo\/([^"]+)",/\1/' | tr -d '[:space:]')
      #       package_version=$(grep '"version":' "$file" | sed -E 's/.*"version": "([^"]+)",/\1/' | tr -d '[:space:]')

      #       if [ -n "$package_name" ] && [ -n "$package_version" ]; then
      #         updated_packages+="$package_name\n"
      #         updated_versions+="$package_version\n"
      #       fi
      #     done <<< "$changed_files"

      #     # Combine packages and versions into a single string
      #     packages_with_versions=$(paste -d: <(echo -e "$updated_packages") <(echo -e "$updated_versions") | tr '\n' ', ' | sed 's/, $//')

      #     # Debugging
      #     echo "DEBUG: Updated Packages: $updated_packages"
      #     echo "DEBUG: Updated Versions: $updated_versions"
      #     echo "DEBUG: Packages with Versions: $packages_with_versions"

      #     # Generate the commit message
      #     if [ -n "$packages_with_versions" ]; then
      #       echo "commit_message=chore(release): $packages_with_versions [skip ci]" >> $GITHUB_ENV
      #     else
      #       echo "commit_message=chore(release): version packages ü¶ã [skip ci]" >> $GITHUB_ENV
      #     fi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: üì£ Open Release Pull Request
      #   if: env.freeze == 'true'
      #   uses: changesets/action@v1
      #   with:
      #     title: "chore(release): version packages ü¶ã"
      #     version: pnpm version:packages
      #     commit: ${{ env.commit_message }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Pull Request
        if: env.freeze == 'true'
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
